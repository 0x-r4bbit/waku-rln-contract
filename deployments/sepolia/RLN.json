{
  "address": "0x4B11778822690DefA80934B3203C170ed6B5d317",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "membershipDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depth",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_poseidonHasher",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "MemberRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        }
      ],
      "name": "MemberWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MEMBERSHIP_DEPOSIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idCommitmentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poseidonHasher",
      "outputs": [
        {
          "internalType": "contract IPoseidonHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "idCommitments",
          "type": "uint256[]"
        }
      ],
      "name": "registerBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "secret",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "secret",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "secrets",
          "type": "uint256[]"
        },
        {
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        }
      ],
      "name": "withdrawBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x31c6392afa03be64d9319382a578fdf891d1c158b4a1fc6691577ea18499395d",
  "receipt": {
    "to": null,
    "from": "0xc2eB015aCb170177F726626707C82f994736ef15",
    "contractAddress": "0x4B11778822690DefA80934B3203C170ed6B5d317",
    "transactionIndex": 23,
    "gasUsed": "1486545",
    "logsBloom": "0x
    "blockHash": "0x95296b86d82f5f5a7eff052dac6a04ce9d30081bf6b99f40a48330e1b2f1967f",
    "transactionHash": "0x31c6392afa03be64d9319382a578fdf891d1c158b4a1fc6691577ea18499395d",
    "logs": [],
    "blockNumber": 3184936,
    "cumulativeGasUsed": "2751840",
    "status": 1,
    "byzantium": true
  },
  "args": [1000000000000000, 20, "0xfa72Ce89D60d085B8FdB445fF6edC47475D58d1E"],
  "numDeployments": 1,
  "solcInputHash": "3d22925ef26b2c95bb2dc86b2f9e06ed",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"membershipDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depth\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poseidonHasher\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"MemberRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"}],\"name\":\"MemberWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEMBERSHIP_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idCommitmentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poseidonHasher\",\"outputs\":[{\"internalType\":\"contract IPoseidonHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"idCommitments\",\"type\":\"uint256[]\"}],\"name\":\"registerBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secret\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secret\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"secrets\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Rln.sol\":\"RLN\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"contracts/PoseidonHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Forked from https://github.com/kilic/rlnapp/\\n\\npragma solidity 0.8.15;\\n\\ninterface IPoseidonHasher {\\n    function hash(uint256 input) external pure returns (uint256 result);\\n\\n    function identity() external pure returns (uint256);\\n}\\n\\ncontract PoseidonHasher is IPoseidonHasher {\\n    uint256 constant Q =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant C0 =\\n        4417881134626180770308697923359573201005643519861877412381846989312604493735;\\n    uint256 constant C1 =\\n        5433650512959517612316327474713065966758808864213826738576266661723522780033;\\n    uint256 constant C2 =\\n        13641176377184356099764086973022553863760045607496549923679278773208775739952;\\n    uint256 constant C3 =\\n        17949713444224994136330421782109149544629237834775211751417461773584374506783;\\n    uint256 constant C4 =\\n        13765628375339178273710281891027109699578766420463125835325926111705201856003;\\n    uint256 constant C5 =\\n        19179513468172002314585757290678967643352171735526887944518845346318719730387;\\n    uint256 constant C6 =\\n        5157412437176756884543472904098424903141745259452875378101256928559722612176;\\n    uint256 constant C7 =\\n        535160875740282236955320458485730000677124519901643397458212725410971557409;\\n    uint256 constant C8 =\\n        1050793453380762984940163090920066886770841063557081906093018330633089036729;\\n    uint256 constant C9 =\\n        10665495010329663932664894101216428400933984666065399374198502106997623173873;\\n    uint256 constant C10 =\\n        19965634623406616956648724894636666805991993496469370618546874926025059150737;\\n    uint256 constant C11 =\\n        13007250030070838431593222885902415182312449212965120303174723305710127422213;\\n    uint256 constant C12 =\\n        16877538715074991604507979123743768693428157847423939051086744213162455276374;\\n    uint256 constant C13 =\\n        18211747749504876135588847560312685184956239426147543810126553367063157141465;\\n    uint256 constant C14 =\\n        18151553319826126919739798892854572062191241985315767086020821632812331245635;\\n    uint256 constant C15 =\\n        19957033149976712666746140949846950406660099037474791840946955175819555930825;\\n    uint256 constant C16 =\\n        3469514863538261843186854830917934449567467100548474599735384052339577040841;\\n    uint256 constant C17 =\\n        989698510043911779243192466312362856042600749099921773896924315611668507708;\\n    uint256 constant C18 =\\n        12568377015646290945235387813564567111330046038050864455358059568128000172201;\\n    uint256 constant C19 =\\n        20856104135605479600325529349246932565148587186338606236677138505306779314172;\\n    uint256 constant C20 =\\n        8206918720503535523121349917159924938835810381723474192155637697065780938424;\\n    uint256 constant C21 =\\n        1309058477013932989380617265069188723120054926187607548493110334522527703566;\\n    uint256 constant C22 =\\n        14076116939332667074621703729512195584105250395163383769419390236426287710606;\\n    uint256 constant C23 =\\n        10153498892749751942204288991871286290442690932856658983589258153608012428674;\\n    uint256 constant C24 =\\n        18202499207234128286137597834010475797175973146805180988367589376893530181575;\\n    uint256 constant C25 =\\n        12739388830157083522877690211447248168864006284243907142044329113461613743052;\\n    uint256 constant C26 =\\n        15123358710467780770838026754240340042441262572309759635224051333176022613949;\\n    uint256 constant C27 =\\n        19925004701844594370904593774447343836015483888496504201331110250494635362184;\\n    uint256 constant C28 =\\n        10352416606816998476681131583320899030072315953910679608943150613208329645891;\\n    uint256 constant C29 =\\n        10567371822366244361703342347428230537114808440249611395507235283708966113221;\\n    uint256 constant C30 =\\n        5635498582763880627392290206431559361272660937399944184533035305989295959602;\\n    uint256 constant C31 =\\n        11866432933224219174041051738704352719163271639958083608224676028593315904909;\\n    uint256 constant C32 =\\n        5795020705294401441272215064554385591292330721703923167136157291459784140431;\\n    uint256 constant C33 =\\n        9482202378699252817564375087302794636287866584767523335624368774856230692758;\\n    uint256 constant C34 =\\n        4245237636894546151746468406560945873445548423466753843402086544922216329298;\\n    uint256 constant C35 =\\n        12000500941313982757584712677991730019124834399479314697467598397927435905133;\\n    uint256 constant C36 =\\n        7596790274058425558167520209857956363736666939016807569082239187494363541787;\\n    uint256 constant C37 =\\n        2484867918246116343205467273440098378820186751202461278013576281097918148877;\\n    uint256 constant C38 =\\n        18312645949449997391810445935615409295369169383463185688973803378104013950190;\\n    uint256 constant C39 =\\n        15320686572748723004980855263301182130424010735782762814513954166519592552733;\\n    uint256 constant C40 =\\n        12618438900597948888520621062416758747872180395546164387827245287017031303859;\\n    uint256 constant C41 =\\n        17438141672027706116733201008397064011774368832458707512367404736905021019585;\\n    uint256 constant C42 =\\n        6374197807230665998865688675365359100400438034755781666913068586172586548950;\\n    uint256 constant C43 =\\n        2189398913433273865510950346186699930188746169476472274335177556702504595264;\\n    uint256 constant C44 =\\n        6268495580028970231803791523870131137294646402347399003576649137450213034606;\\n    uint256 constant C45 =\\n        17896250365994900261202920044129628104272791547990619503076839618914047059275;\\n    uint256 constant C46 =\\n        13692156312448722528008862371944543449350293305158722920787736248435893008873;\\n    uint256 constant C47 =\\n        15234446864368744483209945022439268713300180233589581910497691316744177619376;\\n    uint256 constant C48 =\\n        1572426502623310766593681563281600503979671244997798691029595521622402217227;\\n    uint256 constant C49 =\\n        80103447810215150918585162168214870083573048458555897999822831203653996617;\\n    uint256 constant C50 =\\n        8228820324013669567851850635126713973797711779951230446503353812192849106342;\\n    uint256 constant C51 =\\n        5375851433746509614045812476958526065449377558695752132494533666370449415873;\\n    uint256 constant C52 =\\n        12115998939203497346386774317892338270561208357481805380546938146796257365018;\\n    uint256 constant C53 =\\n        9764067909645821279940531410531154041386008396840887338272986634350423466622;\\n    uint256 constant C54 =\\n        8538708244538850542384936174629541085495830544298260335345008245230827876882;\\n    uint256 constant C55 =\\n        7140127896620013355910287215441004676619168261422440177712039790284719613114;\\n    uint256 constant C56 =\\n        14297402962228458726038826185823085337698917275385741292940049024977027409762;\\n    uint256 constant C57 =\\n        6667115556431351074165934212337261254608231545257434281887966406956835140819;\\n    uint256 constant C58 =\\n        20226761165244293291042617464655196752671169026542832236139342122602741090001;\\n    uint256 constant C59 =\\n        12038289506489256655759141386763477208196694421666339040483042079632134429119;\\n    uint256 constant C60 =\\n        19027757334170818571203982241812412991528769934917288000224335655934473717551;\\n    uint256 constant C61 =\\n        16272152964456553579565580463468069884359929612321610357528838696790370074720;\\n    uint256 constant C62 =\\n        2500392889689246014710135696485946334448570271481948765283016105301740284071;\\n    uint256 constant C63 =\\n        8595254970528530312401637448610398388203855633951264114100575485022581946023;\\n    uint256 constant C64 =\\n        11635945688914011450976408058407206367914559009113158286982919675551688078198;\\n    uint256 constant C65 =\\n        614739068603482619581328040478536306925147663946742687395148680260956671871;\\n    uint256 constant C66 =\\n        18692271780377861570175282183255720350972693125537599213951106550953176268753;\\n    uint256 constant C67 =\\n        4987059230784976306647166378298632695585915319042844495357753339378260807164;\\n    uint256 constant C68 =\\n        21851403978498723616722415377430107676258664746210815234490134600998983955497;\\n    uint256 constant C69 =\\n        9830635451186415300891533983087800047564037813328875992115573428596207326204;\\n    uint256 constant C70 =\\n        4842706106434537116860242620706030229206345167233200482994958847436425185478;\\n    uint256 constant C71 =\\n        6422235064906823218421386871122109085799298052314922856340127798647926126490;\\n    uint256 constant C72 =\\n        4564364104986856861943331689105797031330091877115997069096365671501473357846;\\n    uint256 constant C73 =\\n        1944043894089780613038197112872830569538541856657037469098448708685350671343;\\n    uint256 constant C74 =\\n        21179865974855950600518216085229498748425990426231530451599322283119880194955;\\n    uint256 constant C75 =\\n        14296697761894107574369608843560006996183955751502547883167824879840894933162;\\n    uint256 constant C76 =\\n        12274619649702218570450581712439138337725246879938860735460378251639845671898;\\n    uint256 constant C77 =\\n        16371396450276899401411886674029075408418848209575273031725505038938314070356;\\n    uint256 constant C78 =\\n        3702561221750983937578095019779188631407216522704543451228773892695044653565;\\n    uint256 constant C79 =\\n        19721616877735564664624984774636557499099875603996426215495516594530838681980;\\n    uint256 constant C80 =\\n        6383350109027696789969911008057747025018308755462287526819231672217685282429;\\n    uint256 constant C81 =\\n        20860583956177367265984596617324237471765572961978977333122281041544719622905;\\n    uint256 constant C82 =\\n        5766390934595026947545001478457407504285452477687752470140790011329357286275;\\n    uint256 constant C83 =\\n        4043175758319898049344746138515323336207420888499903387536875603879441092484;\\n    uint256 constant C84 =\\n        15579382179133608217098622223834161692266188678101563820988612253342538956534;\\n    uint256 constant C85 =\\n        1864640783252634743892105383926602930909039567065240010338908865509831749824;\\n    uint256 constant C86 =\\n        15943719865023133586707144161652035291705809358178262514871056013754142625673;\\n    uint256 constant C87 =\\n        2326415993032390211558498780803238091925402878871059708106213703504162832999;\\n    uint256 constant C88 =\\n        19995326402773833553207196590622808505547443523750970375738981396588337910289;\\n    uint256 constant C89 =\\n        5143583711361588952673350526320181330406047695593201009385718506918735286622;\\n    uint256 constant C90 =\\n        15436006486881920976813738625999473183944244531070780793506388892313517319583;\\n    uint256 constant C91 =\\n        16660446760173633166698660166238066533278664023818938868110282615200613695857;\\n    uint256 constant C92 =\\n        4966065365695755376133119391352131079892396024584848298231004326013366253934;\\n    uint256 constant C93 =\\n        20683781957411705574951987677641476019618457561419278856689645563561076926702;\\n    uint256 constant C94 =\\n        17280836839165902792086432296371645107551519324565649849400948918605456875699;\\n    uint256 constant C95 =\\n        17045635513701208892073056357048619435743564064921155892004135325530808465371;\\n    uint256 constant C96 =\\n        17055032967194400710390142791334572297458033582458169295920670679093585707295;\\n    uint256 constant C97 =\\n        15727174639569115300068198908071514334002742825679221638729902577962862163505;\\n    uint256 constant C98 =\\n        1001755657610446661315902885492677747789366510875120894840818704741370398633;\\n    uint256 constant C99 =\\n        18638547332826171619311285502376343504539399518545103511265465604926625041234;\\n    uint256 constant C100 =\\n        6751954224763196429755298529194402870632445298969935050224267844020826420799;\\n    uint256 constant C101 =\\n        3526747115904224771452549517614107688674036840088422555827581348280834879405;\\n    uint256 constant C102 =\\n        15705897908180497062880001271426561999724005008972544196300715293701537574122;\\n    uint256 constant C103 =\\n        574386695213920937259007343820417029802510752426579750428758189312416867750;\\n    uint256 constant C104 =\\n        15973040855000600860816974646787367136127946402908768408978806375685439868553;\\n    uint256 constant C105 =\\n        20934130413948796333037139460875996342810005558806621330680156931816867321122;\\n    uint256 constant C106 =\\n        6918585327145564636398173845411579411526758237572034236476079610890705810764;\\n    uint256 constant C107 =\\n        14158163500813182062258176233162498241310167509137716527054939926126453647182;\\n    uint256 constant C108 =\\n        4164602626597695668474100217150111342272610479949122406544277384862187287433;\\n    uint256 constant C109 =\\n        12146526846507496913615390662823936206892812880963914267275606265272996025304;\\n    uint256 constant C110 =\\n        10153527926900017763244212043512822363696541810586522108597162891799345289938;\\n    uint256 constant C111 =\\n        13564663485965299104296214940873270349072051793008946663855767889066202733588;\\n    uint256 constant C112 =\\n        5612449256997576125867742696783020582952387615430650198777254717398552960096;\\n    uint256 constant C113 =\\n        12151885480032032868507892738683067544172874895736290365318623681886999930120;\\n    uint256 constant C114 =\\n        380452237704664384810613424095477896605414037288009963200982915188629772177;\\n    uint256 constant C115 =\\n        9067557551252570188533509616805287919563636482030947363841198066124642069518;\\n    uint256 constant C116 =\\n        21280306817619711661335268484199763923870315733198162896599997188206277056900;\\n    uint256 constant C117 =\\n        5567165819557297006750252582140767993422097822227408837378089569369734876257;\\n    uint256 constant C118 =\\n        10411936321072105429908396649383171465939606386380071222095155850987201580137;\\n    uint256 constant C119 =\\n        21338390051413922944780864872652000187403217966653363270851298678606449622266;\\n    uint256 constant C120 =\\n        12156296560457833712186127325312904760045212412680904475497938949653569234473;\\n    uint256 constant C121 =\\n        4271647814574748734312113971565139132510281260328947438246615707172526380757;\\n    uint256 constant C122 =\\n        9061738206062369647211128232833114177054715885442782773131292534862178874950;\\n    uint256 constant C123 =\\n        10134551893627587797380445583959894183158393780166496661696555422178052339133;\\n    uint256 constant C124 =\\n        8932270237664043612366044102088319242789325050842783721780970129656616386103;\\n    uint256 constant C125 =\\n        3339412934966886386194449782756711637636784424032779155216609410591712750636;\\n    uint256 constant C126 =\\n        9704903972004596791086522314847373103670545861209569267884026709445485704400;\\n    uint256 constant C127 =\\n        17467570179597572575614276429760169990940929887711661192333523245667228809456;\\n    uint256 constant M00 =\\n        2910766817845651019878574839501801340070030115151021261302834310722729507541;\\n    uint256 constant M01 =\\n        19727366863391167538122140361473584127147630672623100827934084310230022599144;\\n    uint256 constant M10 =\\n        5776684794125549462448597414050232243778680302179439492664047328281728356345;\\n    uint256 constant M11 =\\n        8348174920934122550483593999453880006756108121341067172388445916328941978568;\\n\\n    function hash(\\n        uint256 input\\n    ) external pure override returns (uint256 result) {\\n        return _hash(input);\\n    }\\n\\n    function _hash(uint256 input) internal pure returns (uint256 result) {\\n        assembly {\\n            // Poseidon parameters should be t = 2, RF = 8, RP = 56\\n\\n            // We load the characteristic\\n            let q := Q\\n\\n            // In zerokit implementation, if we pass inp = [a0,a1,..,an] to Poseidon what is effectively hashed is [0,a0,a1,..,an]\\n            // Note that a sequence of MIX-ARK involves 3 Bn254 field additions before the mulmod happens. Worst case we have a value corresponding to 2*(p-1) which is less than 2^256 and hence doesn't overflow\\n            //ROUND 0 - FULL\\n            let s0 := C0\\n            let s1 := add(input, C1)\\n            // SBOX\\n            let t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 1 - FULL\\n            s0 := add(s0, C2)\\n            s1 := add(s1, C3)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 2 - FULL\\n            s0 := add(s0, C4)\\n            s1 := add(s1, C5)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 3 - FULL\\n            s0 := add(s0, C6)\\n            s1 := add(s1, C7)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 4 - PARTIAL\\n            s0 := add(s0, C8)\\n            s1 := add(s1, C9)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 5 - PARTIAL\\n            s0 := add(s0, C10)\\n            s1 := add(s1, C11)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 6 - PARTIAL\\n            s0 := add(s0, C12)\\n            s1 := add(s1, C13)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 7 - PARTIAL\\n            s0 := add(s0, C14)\\n            s1 := add(s1, C15)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 8 - PARTIAL\\n            s0 := add(s0, C16)\\n            s1 := add(s1, C17)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 9 - PARTIAL\\n            s0 := add(s0, C18)\\n            s1 := add(s1, C19)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 10 - PARTIAL\\n            s0 := add(s0, C20)\\n            s1 := add(s1, C21)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 11 - PARTIAL\\n            s0 := add(s0, C22)\\n            s1 := add(s1, C23)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 12 - PARTIAL\\n            s0 := add(s0, C24)\\n            s1 := add(s1, C25)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 13 - PARTIAL\\n            s0 := add(s0, C26)\\n            s1 := add(s1, C27)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 14 - PARTIAL\\n            s0 := add(s0, C28)\\n            s1 := add(s1, C29)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 15 - PARTIAL\\n            s0 := add(s0, C30)\\n            s1 := add(s1, C31)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 16 - PARTIAL\\n            s0 := add(s0, C32)\\n            s1 := add(s1, C33)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 17 - PARTIAL\\n            s0 := add(s0, C34)\\n            s1 := add(s1, C35)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 18 - PARTIAL\\n            s0 := add(s0, C36)\\n            s1 := add(s1, C37)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 19 - PARTIAL\\n            s0 := add(s0, C38)\\n            s1 := add(s1, C39)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 20 - PARTIAL\\n            s0 := add(s0, C40)\\n            s1 := add(s1, C41)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 21 - PARTIAL\\n            s0 := add(s0, C42)\\n            s1 := add(s1, C43)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 22 - PARTIAL\\n            s0 := add(s0, C44)\\n            s1 := add(s1, C45)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 23 - PARTIAL\\n            s0 := add(s0, C46)\\n            s1 := add(s1, C47)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 24 - PARTIAL\\n            s0 := add(s0, C48)\\n            s1 := add(s1, C49)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 25 - PARTIAL\\n            s0 := add(s0, C50)\\n            s1 := add(s1, C51)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 26 - PARTIAL\\n            s0 := add(s0, C52)\\n            s1 := add(s1, C53)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 27 - PARTIAL\\n            s0 := add(s0, C54)\\n            s1 := add(s1, C55)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 28 - PARTIAL\\n            s0 := add(s0, C56)\\n            s1 := add(s1, C57)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 29 - PARTIAL\\n            s0 := add(s0, C58)\\n            s1 := add(s1, C59)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 30 - PARTIAL\\n            s0 := add(s0, C60)\\n            s1 := add(s1, C61)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 31 - PARTIAL\\n            s0 := add(s0, C62)\\n            s1 := add(s1, C63)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 32 - PARTIAL\\n            s0 := add(s0, C64)\\n            s1 := add(s1, C65)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 33 - PARTIAL\\n            s0 := add(s0, C66)\\n            s1 := add(s1, C67)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 34 - PARTIAL\\n            s0 := add(s0, C68)\\n            s1 := add(s1, C69)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 35 - PARTIAL\\n            s0 := add(s0, C70)\\n            s1 := add(s1, C71)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 36 - PARTIAL\\n            s0 := add(s0, C72)\\n            s1 := add(s1, C73)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 37 - PARTIAL\\n            s0 := add(s0, C74)\\n            s1 := add(s1, C75)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 38 - PARTIAL\\n            s0 := add(s0, C76)\\n            s1 := add(s1, C77)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 39 - PARTIAL\\n            s0 := add(s0, C78)\\n            s1 := add(s1, C79)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 40 - PARTIAL\\n            s0 := add(s0, C80)\\n            s1 := add(s1, C81)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 41 - PARTIAL\\n            s0 := add(s0, C82)\\n            s1 := add(s1, C83)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 42 - PARTIAL\\n            s0 := add(s0, C84)\\n            s1 := add(s1, C85)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 43 - PARTIAL\\n            s0 := add(s0, C86)\\n            s1 := add(s1, C87)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 44 - PARTIAL\\n            s0 := add(s0, C88)\\n            s1 := add(s1, C89)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 45 - PARTIAL\\n            s0 := add(s0, C90)\\n            s1 := add(s1, C91)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 46 - PARTIAL\\n            s0 := add(s0, C92)\\n            s1 := add(s1, C93)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 47 - PARTIAL\\n            s0 := add(s0, C94)\\n            s1 := add(s1, C95)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 48 - PARTIAL\\n            s0 := add(s0, C96)\\n            s1 := add(s1, C97)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 49 - PARTIAL\\n            s0 := add(s0, C98)\\n            s1 := add(s1, C99)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 50 - PARTIAL\\n            s0 := add(s0, C100)\\n            s1 := add(s1, C101)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 51 - PARTIAL\\n            s0 := add(s0, C102)\\n            s1 := add(s1, C103)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 52 - PARTIAL\\n            s0 := add(s0, C104)\\n            s1 := add(s1, C105)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 53 - PARTIAL\\n            s0 := add(s0, C106)\\n            s1 := add(s1, C107)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 54 - PARTIAL\\n            s0 := add(s0, C108)\\n            s1 := add(s1, C109)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 55 - PARTIAL\\n            s0 := add(s0, C110)\\n            s1 := add(s1, C111)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 56 - PARTIAL\\n            s0 := add(s0, C112)\\n            s1 := add(s1, C113)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 57 - PARTIAL\\n            s0 := add(s0, C114)\\n            s1 := add(s1, C115)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 58 - PARTIAL\\n            s0 := add(s0, C116)\\n            s1 := add(s1, C117)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 59 - PARTIAL\\n            s0 := add(s0, C118)\\n            s1 := add(s1, C119)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 60 - FULL\\n            s0 := add(s0, C120)\\n            s1 := add(s1, C121)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 61 - FULL\\n            s0 := add(s0, C122)\\n            s1 := add(s1, C123)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 62 - FULL\\n            s0 := add(s0, C124)\\n            s1 := add(s1, C125)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 63 - FULL\\n            s0 := add(s0, C126)\\n            s1 := add(s1, C127)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            s0 := mod(add(mulmod(s0, M00, q), mulmod(s1, M01, q)), q)\\n\\n            result := s0\\n        }\\n    }\\n\\n    function identity() external pure override returns (uint256) {\\n        return _identity();\\n    }\\n\\n    // The hash of 0\\n    function _identity() internal pure returns (uint256) {\\n        return\\n            0x2a09a9fd93c590c26b91effbb2499f07e8f7aa12e2b4940a3aed2411cb65e11c;\\n    }\\n}\\n\",\"keccak256\":\"0x9bb58fba201568f7ec88973f36225cc37775bb6337bc57e854a3e4a20af39edc\",\"license\":\"MIT\"},\"contracts/Rln.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {IPoseidonHasher} from \\\"./PoseidonHasher.sol\\\";\\n\\ncontract RLN {\\n    uint256 public immutable MEMBERSHIP_DEPOSIT;\\n    uint256 public immutable DEPTH;\\n    uint256 public immutable SET_SIZE;\\n\\n    uint256 public idCommitmentIndex;\\n    mapping(uint256 => uint256) public stakedAmounts;\\n    mapping(uint256 => bool) public members;\\n\\n    IPoseidonHasher public poseidonHasher;\\n\\n    event MemberRegistered(uint256 idCommitment, uint256 index);\\n    event MemberWithdrawn(uint256 idCommitment);\\n\\n    constructor(\\n        uint256 membershipDeposit,\\n        uint256 depth,\\n        address _poseidonHasher\\n    ) {\\n        MEMBERSHIP_DEPOSIT = membershipDeposit;\\n        DEPTH = depth;\\n        SET_SIZE = 1 << depth;\\n        poseidonHasher = IPoseidonHasher(_poseidonHasher);\\n    }\\n\\n    function register(uint256 idCommitment) external payable {\\n        require(\\n            msg.value == MEMBERSHIP_DEPOSIT,\\n            \\\"RLN, register: membership deposit is not satisfied\\\"\\n        );\\n        _register(idCommitment, msg.value);\\n    }\\n\\n    function registerBatch(uint256[] calldata idCommitments) external payable {\\n        uint256 idCommitmentlen = idCommitments.length;\\n        require(\\n            idCommitmentIndex + idCommitmentlen <= SET_SIZE,\\n            \\\"RLN, registerBatch: set is full\\\"\\n        );\\n        require(\\n            msg.value == MEMBERSHIP_DEPOSIT * idCommitmentlen,\\n            \\\"RLN, registerBatch: membership deposit is not satisfied\\\"\\n        );\\n        for (uint256 i = 0; i < idCommitmentlen; i++) {\\n            _register(idCommitments[i], msg.value / idCommitmentlen);\\n        }\\n    }\\n\\n    function _register(uint256 idCommitment, uint256 stake) internal {\\n        require(\\n            !members[idCommitment],\\n            \\\"RLN, _register: member already registered\\\"\\n        );\\n        require(idCommitmentIndex < SET_SIZE, \\\"RLN, register: set is full\\\");\\n        if (stake != 0) {\\n            members[idCommitment] = true;\\n            stakedAmounts[idCommitment] = stake;\\n        } else {\\n            members[idCommitment] = true;\\n            stakedAmounts[idCommitment] = 0;\\n        }\\n        emit MemberRegistered(idCommitment, idCommitmentIndex);\\n        idCommitmentIndex += 1;\\n    }\\n\\n    function withdrawBatch(\\n        uint256[] calldata secrets,\\n        address payable[] calldata receivers\\n    ) external {\\n        uint256 batchSize = secrets.length;\\n        require(batchSize != 0, \\\"RLN, withdrawBatch: batch size zero\\\");\\n        require(\\n            batchSize == secrets.length,\\n            \\\"RLN, withdrawBatch: batch size mismatch secrets\\\"\\n        );\\n        require(\\n            batchSize == receivers.length,\\n            \\\"RLN, withdrawBatch: batch size mismatch receivers\\\"\\n        );\\n        for (uint256 i = 0; i < batchSize; i++) {\\n            _withdraw(secrets[i], receivers[i]);\\n        }\\n    }\\n\\n    function withdraw(uint256 secret, address payable receiver) external {\\n        _withdraw(secret, receiver);\\n    }\\n\\n    function withdraw(uint256 secret) external {\\n        _withdraw(secret);\\n    }\\n\\n    function _withdraw(uint256 secret, address payable receiver) internal {\\n        // derive idCommitment\\n        uint256 idCommitment = hash(secret);\\n\\n        // check if member is registered\\n        require(members[idCommitment], \\\"RLN, _withdraw: member not registered\\\");\\n\\n        // check if member has stake\\n        require(\\n            stakedAmounts[idCommitment] != 0,\\n            \\\"RLN, _withdraw: member has no stake\\\"\\n        );\\n\\n        require(\\n            receiver != address(0),\\n            \\\"RLN, _withdraw: empty receiver address\\\"\\n        );\\n\\n        // delete member\\n        members[idCommitment] = false;\\n        stakedAmounts[idCommitment] = 0;\\n\\n        // refund deposit\\n        (bool sent, ) = receiver.call{value: stakedAmounts[idCommitment]}(\\\"\\\");\\n        require(sent, \\\"transfer failed\\\");\\n\\n        emit MemberWithdrawn(idCommitment);\\n    }\\n\\n    function _withdraw(uint256 secret) internal {\\n        // derive idCommitment\\n        uint256 idCommitment = hash(secret);\\n\\n        // check if member is registered\\n        require(members[idCommitment], \\\"RLN, _withdraw: member not registered\\\");\\n\\n        require(stakedAmounts[idCommitment] == 0, \\\"RLN, _withdraw: staked\\\");\\n\\n        // delete member\\n        members[idCommitment] = false;\\n\\n        emit MemberWithdrawn(idCommitment);\\n    }\\n\\n    function hash(uint256 input) internal view returns (uint256) {\\n        return poseidonHasher.hash(input);\\n    }\\n}\\n\",\"keccak256\":\"0x628a9bfc602719d2d606336074ba2262880c3a8c0c13ec1e3cf477a8019c09e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001b7f38038062001b7f833981810160405281019062000037919062000142565b82608081815250508160a08181525050816001901b60c0818152505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506200019e565b600080fd5b6000819050919050565b620000b781620000a2565b8114620000c357600080fd5b50565b600081519050620000d781620000ac565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010a82620000dd565b9050919050565b6200011c81620000fd565b81146200012857600080fd5b50565b6000815190506200013c8162000111565b92915050565b6000806000606084860312156200015e576200015d6200009d565b5b60006200016e86828701620000c6565b93505060206200018186828701620000c6565b925050604062000194868287016200012b565b9150509250925092565b60805160a05160c051611995620001ea6000396000818161045e015281816105cf0152610a840152600061058d0152600081816104cf015281816105f3015261066201526119956000f3fe6080604052600436106100a65760003560e01c806398366e351161006457806398366e35146101aa578063ae74552a146101d5578063bc49912814610200578063d0383d681461023d578063f207564e14610268578063f220b9ec14610284576100a6565b8062f714ce146100ab5780632e1a7d4d146100d4578063331b6ab3146100fd57806340070712146101285780635daf08ca1461015157806369e4863f1461018e575b600080fd5b3480156100b757600080fd5b506100d260048036038101906100cd9190610d18565b6102af565b005b3480156100e057600080fd5b506100fb60048036038101906100f69190610d58565b6102bd565b005b34801561010957600080fd5b506101126102c9565b60405161011f9190610de4565b60405180910390f35b34801561013457600080fd5b5061014f600480360381019061014a9190610eba565b6102ef565b005b34801561015d57600080fd5b5061017860048036038101906101739190610d58565b610434565b6040516101859190610f56565b60405180910390f35b6101a860048036038101906101a39190610f71565b610454565b005b3480156101b657600080fd5b506101bf61058b565b6040516101cc9190610fcd565b60405180910390f35b3480156101e157600080fd5b506101ea6105af565b6040516101f79190610fcd565b60405180910390f35b34801561020c57600080fd5b5061022760048036038101906102229190610d58565b6105b5565b6040516102349190610fcd565b60405180910390f35b34801561024957600080fd5b506102526105cd565b60405161025f9190610fcd565b60405180910390f35b610282600480360381019061027d9190610d58565b6105f1565b005b34801561029057600080fd5b50610299610660565b6040516102a69190610fcd565b60405180910390f35b6102b98282610684565b5050565b6102c6816108f7565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008484905090506000810361033a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103319061106b565b60405180910390fd5b84849050811461037f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610376906110fd565b60405180910390fd5b8282905081146103c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bb9061118f565b60405180910390fd5b60005b8181101561042c576104198686838181106103e5576103e46111af565b5b905060200201358585848181106103ff576103fe6111af565b5b905060200201602081019061041491906111de565b610684565b80806104249061123a565b9150506103c7565b505050505050565b60026020528060005260406000206000915054906101000a900460ff1681565b60008282905090507f00000000000000000000000000000000000000000000000000000000000000008160005461048b9190611282565b11156104cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c390611324565b60405180910390fd5b807f00000000000000000000000000000000000000000000000000000000000000006104f89190611344565b3414610539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053090611410565b60405180910390fd5b60005b818110156105855761057284848381811061055a576105596111af565b5b90506020020135833461056d919061145f565b610a21565b808061057d9061123a565b91505061053c565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005481565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000003414610653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064a90611502565b60405180910390fd5b61065d8134610a21565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061068f83610bd5565b90506002600082815260200190815260200160002060009054906101000a900460ff166106f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e890611594565b60405180910390fd5b6000600160008381526020019081526020016000205403610747576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073e90611626565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ad906116b8565b60405180910390fd5b60006002600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600160008381526020019081526020016000208190555060008273ffffffffffffffffffffffffffffffffffffffff16600160008481526020019081526020016000205460405161083490611709565b60006040518083038185875af1925050503d8060008114610871576040519150601f19603f3d011682016040523d82523d6000602084013e610876565b606091505b50509050806108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b19061176a565b60405180910390fd5b7fad2d771c5ad1c1e6f50cc769e53ec1e194002c29f28c3dd2af5639b60d8072a6826040516108e99190610fcd565b60405180910390a150505050565b600061090282610bd5565b90506002600082815260200190815260200160002060009054906101000a900460ff16610964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095b90611594565b60405180910390fd5b60006001600083815260200190815260200160002054146109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b1906117d6565b60405180910390fd5b60006002600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fad2d771c5ad1c1e6f50cc769e53ec1e194002c29f28c3dd2af5639b60d8072a681604051610a159190610fcd565b60405180910390a15050565b6002600083815260200190815260200160002060009054906101000a900460ff1615610a82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7990611868565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060005410610ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610add906118d4565b60405180910390fd5b60008114610b375760016002600084815260200190815260200160002060006101000a81548160ff021916908315150217905550806001600084815260200190815260200160002081905550610b7d565b60016002600084815260200190815260200160002060006101000a81548160ff021916908315150217905550600060016000848152602001908152602001600020819055505b7f5a92c2530f207992057b9c3e544108ffce3beda4a63719f316967c49bf6159d282600054604051610bb09291906118f4565b60405180910390a16001600080828254610bca9190611282565b925050819055505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b189fd4c836040518263ffffffff1660e01b8152600401610c329190610fcd565b602060405180830381865afa158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190611932565b9050919050565b600080fd5b600080fd5b6000819050919050565b610c9781610c84565b8114610ca257600080fd5b50565b600081359050610cb481610c8e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ce582610cba565b9050919050565b610cf581610cda565b8114610d0057600080fd5b50565b600081359050610d1281610cec565b92915050565b60008060408385031215610d2f57610d2e610c7a565b5b6000610d3d85828601610ca5565b9250506020610d4e85828601610d03565b9150509250929050565b600060208284031215610d6e57610d6d610c7a565b5b6000610d7c84828501610ca5565b91505092915050565b6000819050919050565b6000610daa610da5610da084610cba565b610d85565b610cba565b9050919050565b6000610dbc82610d8f565b9050919050565b6000610dce82610db1565b9050919050565b610dde81610dc3565b82525050565b6000602082019050610df96000830184610dd5565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610e2457610e23610dff565b5b8235905067ffffffffffffffff811115610e4157610e40610e04565b5b602083019150836020820283011115610e5d57610e5c610e09565b5b9250929050565b60008083601f840112610e7a57610e79610dff565b5b8235905067ffffffffffffffff811115610e9757610e96610e04565b5b602083019150836020820283011115610eb357610eb2610e09565b5b9250929050565b60008060008060408587031215610ed457610ed3610c7a565b5b600085013567ffffffffffffffff811115610ef257610ef1610c7f565b5b610efe87828801610e0e565b9450945050602085013567ffffffffffffffff811115610f2157610f20610c7f565b5b610f2d87828801610e64565b925092505092959194509250565b60008115159050919050565b610f5081610f3b565b82525050565b6000602082019050610f6b6000830184610f47565b92915050565b60008060208385031215610f8857610f87610c7a565b5b600083013567ffffffffffffffff811115610fa657610fa5610c7f565b5b610fb285828601610e0e565b92509250509250929050565b610fc781610c84565b82525050565b6000602082019050610fe26000830184610fbe565b92915050565b600082825260208201905092915050565b7f524c4e2c20776974686472617742617463683a2062617463682073697a65207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b6000611055602383610fe8565b915061106082610ff9565b604082019050919050565b6000602082019050818103600083015261108481611048565b9050919050565b7f524c4e2c20776974686472617742617463683a2062617463682073697a65206d60008201527f69736d6174636820736563726574730000000000000000000000000000000000602082015250565b60006110e7602f83610fe8565b91506110f28261108b565b604082019050919050565b60006020820190508181036000830152611116816110da565b9050919050565b7f524c4e2c20776974686472617742617463683a2062617463682073697a65206d60008201527f69736d6174636820726563656976657273000000000000000000000000000000602082015250565b6000611179603183610fe8565b91506111848261111d565b604082019050919050565b600060208201905081810360008301526111a88161116c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156111f4576111f3610c7a565b5b600061120284828501610d03565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061124582610c84565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036112775761127661120b565b5b600182019050919050565b600061128d82610c84565b915061129883610c84565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112cd576112cc61120b565b5b828201905092915050565b7f524c4e2c20726567697374657242617463683a207365742069732066756c6c00600082015250565b600061130e601f83610fe8565b9150611319826112d8565b602082019050919050565b6000602082019050818103600083015261133d81611301565b9050919050565b600061134f82610c84565b915061135a83610c84565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156113935761139261120b565b5b828202905092915050565b7f524c4e2c20726567697374657242617463683a206d656d62657273686970206460008201527f65706f736974206973206e6f7420736174697366696564000000000000000000602082015250565b60006113fa603783610fe8565b91506114058261139e565b604082019050919050565b60006020820190508181036000830152611429816113ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061146a82610c84565b915061147583610c84565b92508261148557611484611430565b5b828204905092915050565b7f524c4e2c2072656769737465723a206d656d62657273686970206465706f736960008201527f74206973206e6f74207361746973666965640000000000000000000000000000602082015250565b60006114ec603283610fe8565b91506114f782611490565b604082019050919050565b6000602082019050818103600083015261151b816114df565b9050919050565b7f524c4e2c205f77697468647261773a206d656d626572206e6f7420726567697360008201527f7465726564000000000000000000000000000000000000000000000000000000602082015250565b600061157e602583610fe8565b915061158982611522565b604082019050919050565b600060208201905081810360008301526115ad81611571565b9050919050565b7f524c4e2c205f77697468647261773a206d656d62657220686173206e6f20737460008201527f616b650000000000000000000000000000000000000000000000000000000000602082015250565b6000611610602383610fe8565b915061161b826115b4565b604082019050919050565b6000602082019050818103600083015261163f81611603565b9050919050565b7f524c4e2c205f77697468647261773a20656d707479207265636569766572206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006116a2602683610fe8565b91506116ad82611646565b604082019050919050565b600060208201905081810360008301526116d181611695565b9050919050565b600081905092915050565b50565b60006116f36000836116d8565b91506116fe826116e3565b600082019050919050565b6000611714826116e6565b9150819050919050565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000611754600f83610fe8565b915061175f8261171e565b602082019050919050565b6000602082019050818103600083015261178381611747565b9050919050565b7f524c4e2c205f77697468647261773a207374616b656400000000000000000000600082015250565b60006117c0601683610fe8565b91506117cb8261178a565b602082019050919050565b600060208201905081810360008301526117ef816117b3565b9050919050565b7f524c4e2c205f72656769737465723a206d656d62657220616c7265616479207260008201527f6567697374657265640000000000000000000000000000000000000000000000602082015250565b6000611852602983610fe8565b915061185d826117f6565b604082019050919050565b6000602082019050818103600083015261188181611845565b9050919050565b7f524c4e2c2072656769737465723a207365742069732066756c6c000000000000600082015250565b60006118be601a83610fe8565b91506118c982611888565b602082019050919050565b600060208201905081810360008301526118ed816118b1565b9050919050565b60006040820190506119096000830185610fbe565b6119166020830184610fbe565b9392505050565b60008151905061192c81610c8e565b92915050565b60006020828403121561194857611947610c7a565b5b60006119568482850161191d565b9150509291505056fea26469706673582212205902aaff360bf5b9d1c6c604770a56f7c89336c0f79d234253a73b2557b3621564736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106100a65760003560e01c806398366e351161006457806398366e35146101aa578063ae74552a146101d5578063bc49912814610200578063d0383d681461023d578063f207564e14610268578063f220b9ec14610284576100a6565b8062f714ce146100ab5780632e1a7d4d146100d4578063331b6ab3146100fd57806340070712146101285780635daf08ca1461015157806369e4863f1461018e575b600080fd5b3480156100b757600080fd5b506100d260048036038101906100cd9190610d18565b6102af565b005b3480156100e057600080fd5b506100fb60048036038101906100f69190610d58565b6102bd565b005b34801561010957600080fd5b506101126102c9565b60405161011f9190610de4565b60405180910390f35b34801561013457600080fd5b5061014f600480360381019061014a9190610eba565b6102ef565b005b34801561015d57600080fd5b5061017860048036038101906101739190610d58565b610434565b6040516101859190610f56565b60405180910390f35b6101a860048036038101906101a39190610f71565b610454565b005b3480156101b657600080fd5b506101bf61058b565b6040516101cc9190610fcd565b60405180910390f35b3480156101e157600080fd5b506101ea6105af565b6040516101f79190610fcd565b60405180910390f35b34801561020c57600080fd5b5061022760048036038101906102229190610d58565b6105b5565b6040516102349190610fcd565b60405180910390f35b34801561024957600080fd5b506102526105cd565b60405161025f9190610fcd565b60405180910390f35b610282600480360381019061027d9190610d58565b6105f1565b005b34801561029057600080fd5b50610299610660565b6040516102a69190610fcd565b60405180910390f35b6102b98282610684565b5050565b6102c6816108f7565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008484905090506000810361033a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103319061106b565b60405180910390fd5b84849050811461037f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610376906110fd565b60405180910390fd5b8282905081146103c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bb9061118f565b60405180910390fd5b60005b8181101561042c576104198686838181106103e5576103e46111af565b5b905060200201358585848181106103ff576103fe6111af565b5b905060200201602081019061041491906111de565b610684565b80806104249061123a565b9150506103c7565b505050505050565b60026020528060005260406000206000915054906101000a900460ff1681565b60008282905090507f00000000000000000000000000000000000000000000000000000000000000008160005461048b9190611282565b11156104cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c390611324565b60405180910390fd5b807f00000000000000000000000000000000000000000000000000000000000000006104f89190611344565b3414610539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053090611410565b60405180910390fd5b60005b818110156105855761057284848381811061055a576105596111af565b5b90506020020135833461056d919061145f565b610a21565b808061057d9061123a565b91505061053c565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005481565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000003414610653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064a90611502565b60405180910390fd5b61065d8134610a21565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061068f83610bd5565b90506002600082815260200190815260200160002060009054906101000a900460ff166106f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e890611594565b60405180910390fd5b6000600160008381526020019081526020016000205403610747576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073e90611626565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ad906116b8565b60405180910390fd5b60006002600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600160008381526020019081526020016000208190555060008273ffffffffffffffffffffffffffffffffffffffff16600160008481526020019081526020016000205460405161083490611709565b60006040518083038185875af1925050503d8060008114610871576040519150601f19603f3d011682016040523d82523d6000602084013e610876565b606091505b50509050806108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b19061176a565b60405180910390fd5b7fad2d771c5ad1c1e6f50cc769e53ec1e194002c29f28c3dd2af5639b60d8072a6826040516108e99190610fcd565b60405180910390a150505050565b600061090282610bd5565b90506002600082815260200190815260200160002060009054906101000a900460ff16610964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095b90611594565b60405180910390fd5b60006001600083815260200190815260200160002054146109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b1906117d6565b60405180910390fd5b60006002600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fad2d771c5ad1c1e6f50cc769e53ec1e194002c29f28c3dd2af5639b60d8072a681604051610a159190610fcd565b60405180910390a15050565b6002600083815260200190815260200160002060009054906101000a900460ff1615610a82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7990611868565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060005410610ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610add906118d4565b60405180910390fd5b60008114610b375760016002600084815260200190815260200160002060006101000a81548160ff021916908315150217905550806001600084815260200190815260200160002081905550610b7d565b60016002600084815260200190815260200160002060006101000a81548160ff021916908315150217905550600060016000848152602001908152602001600020819055505b7f5a92c2530f207992057b9c3e544108ffce3beda4a63719f316967c49bf6159d282600054604051610bb09291906118f4565b60405180910390a16001600080828254610bca9190611282565b925050819055505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b189fd4c836040518263ffffffff1660e01b8152600401610c329190610fcd565b602060405180830381865afa158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190611932565b9050919050565b600080fd5b600080fd5b6000819050919050565b610c9781610c84565b8114610ca257600080fd5b50565b600081359050610cb481610c8e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ce582610cba565b9050919050565b610cf581610cda565b8114610d0057600080fd5b50565b600081359050610d1281610cec565b92915050565b60008060408385031215610d2f57610d2e610c7a565b5b6000610d3d85828601610ca5565b9250506020610d4e85828601610d03565b9150509250929050565b600060208284031215610d6e57610d6d610c7a565b5b6000610d7c84828501610ca5565b91505092915050565b6000819050919050565b6000610daa610da5610da084610cba565b610d85565b610cba565b9050919050565b6000610dbc82610d8f565b9050919050565b6000610dce82610db1565b9050919050565b610dde81610dc3565b82525050565b6000602082019050610df96000830184610dd5565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610e2457610e23610dff565b5b8235905067ffffffffffffffff811115610e4157610e40610e04565b5b602083019150836020820283011115610e5d57610e5c610e09565b5b9250929050565b60008083601f840112610e7a57610e79610dff565b5b8235905067ffffffffffffffff811115610e9757610e96610e04565b5b602083019150836020820283011115610eb357610eb2610e09565b5b9250929050565b60008060008060408587031215610ed457610ed3610c7a565b5b600085013567ffffffffffffffff811115610ef257610ef1610c7f565b5b610efe87828801610e0e565b9450945050602085013567ffffffffffffffff811115610f2157610f20610c7f565b5b610f2d87828801610e64565b925092505092959194509250565b60008115159050919050565b610f5081610f3b565b82525050565b6000602082019050610f6b6000830184610f47565b92915050565b60008060208385031215610f8857610f87610c7a565b5b600083013567ffffffffffffffff811115610fa657610fa5610c7f565b5b610fb285828601610e0e565b92509250509250929050565b610fc781610c84565b82525050565b6000602082019050610fe26000830184610fbe565b92915050565b600082825260208201905092915050565b7f524c4e2c20776974686472617742617463683a2062617463682073697a65207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b6000611055602383610fe8565b915061106082610ff9565b604082019050919050565b6000602082019050818103600083015261108481611048565b9050919050565b7f524c4e2c20776974686472617742617463683a2062617463682073697a65206d60008201527f69736d6174636820736563726574730000000000000000000000000000000000602082015250565b60006110e7602f83610fe8565b91506110f28261108b565b604082019050919050565b60006020820190508181036000830152611116816110da565b9050919050565b7f524c4e2c20776974686472617742617463683a2062617463682073697a65206d60008201527f69736d6174636820726563656976657273000000000000000000000000000000602082015250565b6000611179603183610fe8565b91506111848261111d565b604082019050919050565b600060208201905081810360008301526111a88161116c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156111f4576111f3610c7a565b5b600061120284828501610d03565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061124582610c84565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036112775761127661120b565b5b600182019050919050565b600061128d82610c84565b915061129883610c84565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112cd576112cc61120b565b5b828201905092915050565b7f524c4e2c20726567697374657242617463683a207365742069732066756c6c00600082015250565b600061130e601f83610fe8565b9150611319826112d8565b602082019050919050565b6000602082019050818103600083015261133d81611301565b9050919050565b600061134f82610c84565b915061135a83610c84565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156113935761139261120b565b5b828202905092915050565b7f524c4e2c20726567697374657242617463683a206d656d62657273686970206460008201527f65706f736974206973206e6f7420736174697366696564000000000000000000602082015250565b60006113fa603783610fe8565b91506114058261139e565b604082019050919050565b60006020820190508181036000830152611429816113ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061146a82610c84565b915061147583610c84565b92508261148557611484611430565b5b828204905092915050565b7f524c4e2c2072656769737465723a206d656d62657273686970206465706f736960008201527f74206973206e6f74207361746973666965640000000000000000000000000000602082015250565b60006114ec603283610fe8565b91506114f782611490565b604082019050919050565b6000602082019050818103600083015261151b816114df565b9050919050565b7f524c4e2c205f77697468647261773a206d656d626572206e6f7420726567697360008201527f7465726564000000000000000000000000000000000000000000000000000000602082015250565b600061157e602583610fe8565b915061158982611522565b604082019050919050565b600060208201905081810360008301526115ad81611571565b9050919050565b7f524c4e2c205f77697468647261773a206d656d62657220686173206e6f20737460008201527f616b650000000000000000000000000000000000000000000000000000000000602082015250565b6000611610602383610fe8565b915061161b826115b4565b604082019050919050565b6000602082019050818103600083015261163f81611603565b9050919050565b7f524c4e2c205f77697468647261773a20656d707479207265636569766572206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006116a2602683610fe8565b91506116ad82611646565b604082019050919050565b600060208201905081810360008301526116d181611695565b9050919050565b600081905092915050565b50565b60006116f36000836116d8565b91506116fe826116e3565b600082019050919050565b6000611714826116e6565b9150819050919050565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000611754600f83610fe8565b915061175f8261171e565b602082019050919050565b6000602082019050818103600083015261178381611747565b9050919050565b7f524c4e2c205f77697468647261773a207374616b656400000000000000000000600082015250565b60006117c0601683610fe8565b91506117cb8261178a565b602082019050919050565b600060208201905081810360008301526117ef816117b3565b9050919050565b7f524c4e2c205f72656769737465723a206d656d62657220616c7265616479207260008201527f6567697374657265640000000000000000000000000000000000000000000000602082015250565b6000611852602983610fe8565b915061185d826117f6565b604082019050919050565b6000602082019050818103600083015261188181611845565b9050919050565b7f524c4e2c2072656769737465723a207365742069732066756c6c000000000000600082015250565b60006118be601a83610fe8565b91506118c982611888565b602082019050919050565b600060208201905081810360008301526118ed816118b1565b9050919050565b60006040820190506119096000830185610fbe565b6119166020830184610fbe565b9392505050565b60008151905061192c81610c8e565b92915050565b60006020828403121561194857611947610c7a565b5b60006119568482850161191d565b9150509291505056fea26469706673582212205902aaff360bf5b9d1c6c604770a56f7c89336c0f79d234253a73b2557b3621564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 468,
        "contract": "contracts/Rln.sol:RLN",
        "label": "idCommitmentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 472,
        "contract": "contracts/Rln.sol:RLN",
        "label": "stakedAmounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 476,
        "contract": "contracts/Rln.sol:RLN",
        "label": "members",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 479,
        "contract": "contracts/Rln.sol:RLN",
        "label": "poseidonHasher",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPoseidonHasher)14"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPoseidonHasher)14": {
        "encoding": "inplace",
        "label": "contract IPoseidonHasher",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
